// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dnsblockchain/dao/v1/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DaoParams defines the parameters for the dao module.
type DaoParams struct {
	// Duration of the voting period in number of blocks.
	VotingPeriodBlocks uint64 `protobuf:"varint,1,opt,name=voting_period_blocks,json=votingPeriodBlocks,proto3" json:"voting_period_blocks,omitempty"`
	// Minimum deposit required to submit a proposal for general types.
	ProposalSubmissionDeposit github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=proposal_submission_deposit,json=proposalSubmissionDeposit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"proposal_submission_deposit"`
	// Minimum percentage of TotalVotingPowerAtSnapshot that must participate (vote YES, NO, or ABSTAIN)
	// for a proposal to be considered valid for tallying. (e.g., "0.33" for 33%).
	// Stored as string, validated as Dec in Go.
	QuorumPercent cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=quorum_percent,json=quorumPercent,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quorum_percent"`
	// Minimum percentage of YES votes (of the total voting power that voted, or total at snapshot)
	// for a proposal to pass. (e.g., "0.50" for 50%). Stored as string, validated as Dec in Go.
	MinYesThresholdPercent cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=min_yes_threshold_percent,json=minYesThresholdPercent,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_yes_threshold_percent"`
	// Denomination of the token used for voting power.
	VotingTokenDenom string `protobuf:"bytes,4,opt,name=voting_token_denom,json=votingTokenDenom,proto3" json:"voting_token_denom,omitempty"`
	// Duration in blocks for which voting power decays from full to zero.
	VotingPowerDecayDurationBlocks uint64 `protobuf:"varint,5,opt,name=voting_power_decay_duration_blocks,json=votingPowerDecayDurationBlocks,proto3" json:"voting_power_decay_duration_blocks,omitempty"`
	// Amount of voting tokens distributed as reward per block to (e.g., active validators).
	// If zero, this mechanism is disabled.
	ValidatorRewardVotingTokensAmount types.Coin `protobuf:"bytes,6,opt,name=validator_reward_voting_tokens_amount,json=validatorRewardVotingTokensAmount,proto3" json:"validator_reward_voting_tokens_amount"`
	// Cost to submit a new TLD proposal.
	AddTldProposalCost github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=add_tld_proposal_cost,json=addTldProposalCost,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"add_tld_proposal_cost"`
}

func (m *DaoParams) Reset()         { *m = DaoParams{} }
func (m *DaoParams) String() string { return proto.CompactTextString(m) }
func (*DaoParams) ProtoMessage()    {}
func (*DaoParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e773e4449bbc7e5, []int{0}
}
func (m *DaoParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DaoParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DaoParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DaoParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaoParams.Merge(m, src)
}
func (m *DaoParams) XXX_Size() int {
	return m.Size()
}
func (m *DaoParams) XXX_DiscardUnknown() {
	xxx_messageInfo_DaoParams.DiscardUnknown(m)
}

var xxx_messageInfo_DaoParams proto.InternalMessageInfo

func (m *DaoParams) GetVotingPeriodBlocks() uint64 {
	if m != nil {
		return m.VotingPeriodBlocks
	}
	return 0
}

func (m *DaoParams) GetProposalSubmissionDeposit() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ProposalSubmissionDeposit
	}
	return nil
}

func (m *DaoParams) GetVotingTokenDenom() string {
	if m != nil {
		return m.VotingTokenDenom
	}
	return ""
}

func (m *DaoParams) GetVotingPowerDecayDurationBlocks() uint64 {
	if m != nil {
		return m.VotingPowerDecayDurationBlocks
	}
	return 0
}

func (m *DaoParams) GetValidatorRewardVotingTokensAmount() types.Coin {
	if m != nil {
		return m.ValidatorRewardVotingTokensAmount
	}
	return types.Coin{}
}

func (m *DaoParams) GetAddTldProposalCost() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.AddTldProposalCost
	}
	return nil
}

func init() {
	proto.RegisterType((*DaoParams)(nil), "dnsblockchain.dao.v1.DaoParams")
}

func init() { proto.RegisterFile("dnsblockchain/dao/v1/params.proto", fileDescriptor_4e773e4449bbc7e5) }

var fileDescriptor_4e773e4449bbc7e5 = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0x8d, 0xbf, 0xe6, 0x0b, 0xd4, 0x08, 0x04, 0x56, 0x40, 0x4e, 0x2b, 0x9c, 0xb4, 0x08, 0x14,
	0x21, 0xb0, 0x1b, 0x7a, 0xe3, 0x46, 0xea, 0x53, 0xc5, 0x21, 0x32, 0x11, 0x12, 0x1c, 0x58, 0xad,
	0xbd, 0xab, 0x64, 0x95, 0x78, 0xc7, 0xf5, 0xac, 0x53, 0x72, 0xe1, 0x07, 0x00, 0x07, 0x7e, 0x02,
	0x67, 0x4e, 0xfc, 0x8c, 0x1e, 0x7b, 0x44, 0x1c, 0x0a, 0x4a, 0x0e, 0xf0, 0x33, 0xd0, 0xae, 0x9d,
	0x40, 0x25, 0x84, 0x38, 0x70, 0xb1, 0x57, 0x3b, 0x6f, 0xde, 0x7b, 0x9a, 0xb7, 0x63, 0xef, 0x30,
	0x89, 0xf1, 0x14, 0x92, 0x49, 0x32, 0xa6, 0x42, 0x06, 0x8c, 0x42, 0x30, 0xeb, 0x05, 0x19, 0xcd,
	0x69, 0x8a, 0x7e, 0x96, 0x83, 0x02, 0xa7, 0x79, 0x0e, 0xe2, 0x33, 0x0a, 0xfe, 0xac, 0xb7, 0xd5,
	0x1c, 0xc1, 0x08, 0x0c, 0x20, 0xd0, 0xa7, 0x12, 0xbb, 0x75, 0x8d, 0xa6, 0x42, 0x42, 0x60, 0xbe,
	0xd5, 0x95, 0x97, 0x00, 0xa6, 0x80, 0x41, 0x4c, 0x91, 0x07, 0xb3, 0x5e, 0xcc, 0x15, 0xed, 0x05,
	0x09, 0x08, 0x59, 0xd6, 0x77, 0xdf, 0x36, 0xec, 0xcd, 0x90, 0xc2, 0xc0, 0x48, 0x3a, 0x7b, 0x76,
	0x73, 0x06, 0x4a, 0xc8, 0x11, 0xc9, 0x78, 0x2e, 0x80, 0x11, 0xa3, 0x8c, 0xae, 0xd5, 0xb1, 0xba,
	0xf5, 0xc8, 0x29, 0x6b, 0x03, 0x53, 0xea, 0x9b, 0x8a, 0xf3, 0xc6, 0xb2, 0xb7, 0xb3, 0x1c, 0x32,
	0x40, 0x3a, 0x25, 0x58, 0xc4, 0xa9, 0x40, 0x14, 0x20, 0x09, 0xe3, 0x19, 0xa0, 0x50, 0xee, 0x7f,
	0x9d, 0x8d, 0xee, 0xa5, 0x07, 0x2d, 0xbf, 0xb4, 0xe1, 0x6b, 0x1b, 0x7e, 0x65, 0xc3, 0x3f, 0x00,
	0x21, 0xfb, 0x7b, 0x27, 0x67, 0xed, 0xda, 0x87, 0x2f, 0xed, 0xee, 0x48, 0xa8, 0x71, 0x11, 0xfb,
	0x09, 0xa4, 0x41, 0xe5, 0xb9, 0xfc, 0xdd, 0x47, 0x36, 0x09, 0xd4, 0x3c, 0xe3, 0x68, 0x1a, 0x30,
	0x6a, 0xad, 0xf4, 0x9e, 0xac, 0xe5, 0xc2, 0x52, 0xcd, 0x39, 0xb4, 0xaf, 0x1c, 0x15, 0x90, 0x17,
	0xa9, 0xf6, 0x9f, 0x70, 0xa9, 0xdc, 0x8b, 0x1d, 0xab, 0xbb, 0xd9, 0xbf, 0xa5, 0x45, 0x3e, 0x9f,
	0xb5, 0xb7, 0x4b, 0x4a, 0x64, 0x13, 0x5f, 0x40, 0x90, 0x52, 0x35, 0xf6, 0x1f, 0xf3, 0x11, 0x4d,
	0xe6, 0x21, 0x4f, 0xa2, 0xcb, 0x65, 0xeb, 0xa0, 0xec, 0x74, 0x5e, 0xd8, 0xad, 0x54, 0x48, 0x32,
	0xe7, 0x48, 0xd4, 0x38, 0xe7, 0x38, 0x86, 0x29, 0x5b, 0xd3, 0x6e, 0xfc, 0x3d, 0xed, 0x8d, 0x54,
	0xc8, 0x67, 0x1c, 0x87, 0x2b, 0x8e, 0x15, 0xff, 0x3d, 0xbb, 0x9a, 0x27, 0x51, 0x30, 0xe1, 0x7a,
	0x62, 0x12, 0x52, 0xb7, 0xae, 0x89, 0xa3, 0xab, 0x65, 0x65, 0xa8, 0x0b, 0xa1, 0xbe, 0x77, 0x0e,
	0xed, 0xdd, 0x55, 0x32, 0x70, 0xcc, 0x73, 0xc2, 0x78, 0x42, 0xe7, 0x84, 0x15, 0x39, 0x55, 0x7a,
	0xdc, 0x55, 0x4e, 0xff, 0x9b, 0x9c, 0xbc, 0x2a, 0x27, 0x0d, 0x0c, 0x35, 0x2e, 0xac, 0x60, 0x55,
	0x66, 0x47, 0xf6, 0xed, 0x19, 0x9d, 0x0a, 0x46, 0x15, 0xe4, 0x24, 0xe7, 0xc7, 0x34, 0x67, 0xe4,
	0x57, 0x2b, 0x48, 0x68, 0x0a, 0x85, 0x54, 0x6e, 0xa3, 0x63, 0xfd, 0x39, 0xbc, 0xba, 0x1e, 0x40,
	0xb4, 0xb3, 0x66, 0x8b, 0x0c, 0xd9, 0xd3, 0x9f, 0xe6, 0xf1, 0x91, 0x61, 0x72, 0x5e, 0xd9, 0xd7,
	0x29, 0x63, 0x44, 0xe9, 0x11, 0xae, 0x5e, 0x4b, 0x02, 0xa8, 0xdc, 0x0b, 0xff, 0xfe, 0x7d, 0x38,
	0x94, 0xb1, 0xe1, 0x94, 0x0d, 0x2a, 0x9d, 0x03, 0x40, 0xf5, 0xf0, 0xce, 0xf7, 0xf7, 0x6d, 0xeb,
	0xf5, 0xb7, 0x8f, 0x77, 0x6f, 0x9e, 0xdf, 0xb8, 0x97, 0x66, 0xe7, 0xd6, 0x0b, 0xd0, 0xdf, 0x3f,
	0x59, 0x78, 0xd6, 0xe9, 0xc2, 0xb3, 0xbe, 0x2e, 0x3c, 0xeb, 0xdd, 0xd2, 0xab, 0x9d, 0x2e, 0xbd,
	0xda, 0xa7, 0xa5, 0x57, 0x7b, 0xde, 0xfa, 0x5d, 0xa3, 0x91, 0x8d, 0x1b, 0x66, 0x95, 0xf6, 0x7f,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xf0, 0x61, 0x39, 0xce, 0x03, 0x00, 0x00,
}

func (this *DaoParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DaoParams)
	if !ok {
		that2, ok := that.(DaoParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VotingPeriodBlocks != that1.VotingPeriodBlocks {
		return false
	}
	if len(this.ProposalSubmissionDeposit) != len(that1.ProposalSubmissionDeposit) {
		return false
	}
	for i := range this.ProposalSubmissionDeposit {
		if !this.ProposalSubmissionDeposit[i].Equal(&that1.ProposalSubmissionDeposit[i]) {
			return false
		}
	}
	if !this.QuorumPercent.Equal(that1.QuorumPercent) {
		return false
	}
	if !this.MinYesThresholdPercent.Equal(that1.MinYesThresholdPercent) {
		return false
	}
	if this.VotingTokenDenom != that1.VotingTokenDenom {
		return false
	}
	if this.VotingPowerDecayDurationBlocks != that1.VotingPowerDecayDurationBlocks {
		return false
	}
	if !this.ValidatorRewardVotingTokensAmount.Equal(&that1.ValidatorRewardVotingTokensAmount) {
		return false
	}
	if len(this.AddTldProposalCost) != len(that1.AddTldProposalCost) {
		return false
	}
	for i := range this.AddTldProposalCost {
		if !this.AddTldProposalCost[i].Equal(&that1.AddTldProposalCost[i]) {
			return false
		}
	}
	return true
}
func (m *DaoParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaoParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DaoParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.QuorumPercent.Size()
		i -= size
		if _, err := m.QuorumPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.AddTldProposalCost) > 0 {
		for iNdEx := len(m.AddTldProposalCost) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddTldProposalCost[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size, err := m.ValidatorRewardVotingTokensAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.VotingPowerDecayDurationBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.VotingPowerDecayDurationBlocks))
		i--
		dAtA[i] = 0x28
	}
	if len(m.VotingTokenDenom) > 0 {
		i -= len(m.VotingTokenDenom)
		copy(dAtA[i:], m.VotingTokenDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.VotingTokenDenom)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.MinYesThresholdPercent.Size()
		i -= size
		if _, err := m.MinYesThresholdPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ProposalSubmissionDeposit) > 0 {
		for iNdEx := len(m.ProposalSubmissionDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProposalSubmissionDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.VotingPeriodBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.VotingPeriodBlocks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DaoParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotingPeriodBlocks != 0 {
		n += 1 + sovParams(uint64(m.VotingPeriodBlocks))
	}
	if len(m.ProposalSubmissionDeposit) > 0 {
		for _, e := range m.ProposalSubmissionDeposit {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.MinYesThresholdPercent.Size()
	n += 1 + l + sovParams(uint64(l))
	l = len(m.VotingTokenDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.VotingPowerDecayDurationBlocks != 0 {
		n += 1 + sovParams(uint64(m.VotingPowerDecayDurationBlocks))
	}
	l = m.ValidatorRewardVotingTokensAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	if len(m.AddTldProposalCost) > 0 {
		for _, e := range m.AddTldProposalCost {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.QuorumPercent.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DaoParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaoParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaoParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPeriodBlocks", wireType)
			}
			m.VotingPeriodBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPeriodBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalSubmissionDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalSubmissionDeposit = append(m.ProposalSubmissionDeposit, types.Coin{})
			if err := m.ProposalSubmissionDeposit[len(m.ProposalSubmissionDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinYesThresholdPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinYesThresholdPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotingTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPowerDecayDurationBlocks", wireType)
			}
			m.VotingPowerDecayDurationBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPowerDecayDurationBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorRewardVotingTokensAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorRewardVotingTokensAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddTldProposalCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddTldProposalCost = append(m.AddTldProposalCost, types.Coin{})
			if err := m.AddTldProposalCost[len(m.AddTldProposalCost)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QuorumPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
