// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dnsblockchain/dao/v1/dao.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	any "github.com/cosmos/gogoproto/types/any"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ProposalStatus enumerates the valid statuses of a proposal.
type ProposalStatus int32

const (
	ProposalStatus_PROPOSAL_STATUS_UNSPECIFIED   ProposalStatus = 0
	ProposalStatus_PROPOSAL_STATUS_SUBMITTED     ProposalStatus = 1
	ProposalStatus_PROPOSAL_STATUS_VOTING_PERIOD ProposalStatus = 2
	ProposalStatus_PROPOSAL_STATUS_PASSED        ProposalStatus = 3
	ProposalStatus_PROPOSAL_STATUS_REJECTED      ProposalStatus = 4
	ProposalStatus_PROPOSAL_STATUS_EXECUTED      ProposalStatus = 5
	ProposalStatus_PROPOSAL_STATUS_FAILED        ProposalStatus = 6
)

var ProposalStatus_name = map[int32]string{
	0: "PROPOSAL_STATUS_UNSPECIFIED",
	1: "PROPOSAL_STATUS_SUBMITTED",
	2: "PROPOSAL_STATUS_VOTING_PERIOD",
	3: "PROPOSAL_STATUS_PASSED",
	4: "PROPOSAL_STATUS_REJECTED",
	5: "PROPOSAL_STATUS_EXECUTED",
	6: "PROPOSAL_STATUS_FAILED",
}

var ProposalStatus_value = map[string]int32{
	"PROPOSAL_STATUS_UNSPECIFIED":   0,
	"PROPOSAL_STATUS_SUBMITTED":     1,
	"PROPOSAL_STATUS_VOTING_PERIOD": 2,
	"PROPOSAL_STATUS_PASSED":        3,
	"PROPOSAL_STATUS_REJECTED":      4,
	"PROPOSAL_STATUS_EXECUTED":      5,
	"PROPOSAL_STATUS_FAILED":        6,
}

func (x ProposalStatus) String() string {
	return proto.EnumName(ProposalStatus_name, int32(x))
}

func (ProposalStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b0973819413f9272, []int{0}
}

// VoteOption enumerates the valid vote options for a proposal.
type VoteOption int32

const (
	VoteOption_VOTE_OPTION_UNSPECIFIED VoteOption = 0
	VoteOption_VOTE_OPTION_YES         VoteOption = 1
	VoteOption_VOTE_OPTION_NO          VoteOption = 2
	VoteOption_VOTE_OPTION_ABSTAIN     VoteOption = 3
)

var VoteOption_name = map[int32]string{
	0: "VOTE_OPTION_UNSPECIFIED",
	1: "VOTE_OPTION_YES",
	2: "VOTE_OPTION_NO",
	3: "VOTE_OPTION_ABSTAIN",
}

var VoteOption_value = map[string]int32{
	"VOTE_OPTION_UNSPECIFIED": 0,
	"VOTE_OPTION_YES":         1,
	"VOTE_OPTION_NO":          2,
	"VOTE_OPTION_ABSTAIN":     3,
}

func (x VoteOption) String() string {
	return proto.EnumName(VoteOption_name, int32(x))
}

func (VoteOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b0973819413f9272, []int{1}
}

// Proposal defines the core proposal structure.
type Proposal struct {
	Id               uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Proposer         string         `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Title            string         `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description      string         `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Content          *any.Any       `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Status           ProposalStatus `protobuf:"varint,6,opt,name=status,proto3,enum=dnsblockchain.dao.v1.ProposalStatus" json:"status,omitempty"`
	SubmitBlock      uint64         `protobuf:"varint,7,opt,name=submit_block,json=submitBlock,proto3" json:"submit_block,omitempty"`
	VotingStartBlock uint64         `protobuf:"varint,8,opt,name=voting_start_block,json=votingStartBlock,proto3" json:"voting_start_block,omitempty"`
	VotingEndBlock   uint64         `protobuf:"varint,9,opt,name=voting_end_block,json=votingEndBlock,proto3" json:"voting_end_block,omitempty"`
	// Tally results
	YesVotes     cosmossdk_io_math.Int `protobuf:"bytes,10,opt,name=yes_votes,json=yesVotes,proto3,customtype=cosmossdk.io/math.Int" json:"yes_votes"`
	NoVotes      cosmossdk_io_math.Int `protobuf:"bytes,11,opt,name=no_votes,json=noVotes,proto3,customtype=cosmossdk.io/math.Int" json:"no_votes"`
	AbstainVotes cosmossdk_io_math.Int `protobuf:"bytes,12,opt,name=abstain_votes,json=abstainVotes,proto3,customtype=cosmossdk.io/math.Int" json:"abstain_votes"`
	// Total voting power at the time voting started, to calculate percentages against.
	TotalVotingPowerAtSnapshot cosmossdk_io_math.Int `protobuf:"bytes,13,opt,name=total_voting_power_at_snapshot,json=totalVotingPowerAtSnapshot,proto3,customtype=cosmossdk.io/math.Int" json:"total_voting_power_at_snapshot"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0973819413f9272, []int{0}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Proposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *Proposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Proposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Proposal) GetContent() *any.Any {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Proposal) GetStatus() ProposalStatus {
	if m != nil {
		return m.Status
	}
	return ProposalStatus_PROPOSAL_STATUS_UNSPECIFIED
}

func (m *Proposal) GetSubmitBlock() uint64 {
	if m != nil {
		return m.SubmitBlock
	}
	return 0
}

func (m *Proposal) GetVotingStartBlock() uint64 {
	if m != nil {
		return m.VotingStartBlock
	}
	return 0
}

func (m *Proposal) GetVotingEndBlock() uint64 {
	if m != nil {
		return m.VotingEndBlock
	}
	return 0
}

// Content for a proposal to add a TLD
type AddTldProposalContent struct {
	Tld         string `protobuf:"bytes,1,opt,name=tld,proto3" json:"tld,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *AddTldProposalContent) Reset()         { *m = AddTldProposalContent{} }
func (m *AddTldProposalContent) String() string { return proto.CompactTextString(m) }
func (*AddTldProposalContent) ProtoMessage()    {}
func (*AddTldProposalContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0973819413f9272, []int{1}
}
func (m *AddTldProposalContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTldProposalContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTldProposalContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTldProposalContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTldProposalContent.Merge(m, src)
}
func (m *AddTldProposalContent) XXX_Size() int {
	return m.Size()
}
func (m *AddTldProposalContent) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTldProposalContent.DiscardUnknown(m)
}

var xxx_messageInfo_AddTldProposalContent proto.InternalMessageInfo

func (m *AddTldProposalContent) GetTld() string {
	if m != nil {
		return m.Tld
	}
	return ""
}

func (m *AddTldProposalContent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// Content for a general proposal requesting tokens for an activity
type RequestTokensProposalContent struct {
	RecipientAddress    string                                   `protobuf:"bytes,1,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	AmountRequested     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount_requested,json=amountRequested,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount_requested"`
	ActivityDescription string                                   `protobuf:"bytes,3,opt,name=activity_description,json=activityDescription,proto3" json:"activity_description,omitempty"`
}

func (m *RequestTokensProposalContent) Reset()         { *m = RequestTokensProposalContent{} }
func (m *RequestTokensProposalContent) String() string { return proto.CompactTextString(m) }
func (*RequestTokensProposalContent) ProtoMessage()    {}
func (*RequestTokensProposalContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0973819413f9272, []int{2}
}
func (m *RequestTokensProposalContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestTokensProposalContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestTokensProposalContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestTokensProposalContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestTokensProposalContent.Merge(m, src)
}
func (m *RequestTokensProposalContent) XXX_Size() int {
	return m.Size()
}
func (m *RequestTokensProposalContent) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestTokensProposalContent.DiscardUnknown(m)
}

var xxx_messageInfo_RequestTokensProposalContent proto.InternalMessageInfo

func (m *RequestTokensProposalContent) GetRecipientAddress() string {
	if m != nil {
		return m.RecipientAddress
	}
	return ""
}

func (m *RequestTokensProposalContent) GetAmountRequested() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.AmountRequested
	}
	return nil
}

func (m *RequestTokensProposalContent) GetActivityDescription() string {
	if m != nil {
		return m.ActivityDescription
	}
	return ""
}

// Vote defines a vote on a proposal.
type Vote struct {
	ProposalId uint64     `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Voter      string     `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
	Option     VoteOption `protobuf:"varint,3,opt,name=option,proto3,enum=dnsblockchain.dao.v1.VoteOption" json:"option,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0973819413f9272, []int{3}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *Vote) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

func (m *Vote) GetOption() VoteOption {
	if m != nil {
		return m.Option
	}
	return VoteOption_VOTE_OPTION_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("dnsblockchain.dao.v1.ProposalStatus", ProposalStatus_name, ProposalStatus_value)
	proto.RegisterEnum("dnsblockchain.dao.v1.VoteOption", VoteOption_name, VoteOption_value)
	proto.RegisterType((*Proposal)(nil), "dnsblockchain.dao.v1.Proposal")
	proto.RegisterType((*AddTldProposalContent)(nil), "dnsblockchain.dao.v1.AddTldProposalContent")
	proto.RegisterType((*RequestTokensProposalContent)(nil), "dnsblockchain.dao.v1.RequestTokensProposalContent")
	proto.RegisterType((*Vote)(nil), "dnsblockchain.dao.v1.Vote")
}

func init() { proto.RegisterFile("dnsblockchain/dao/v1/dao.proto", fileDescriptor_b0973819413f9272) }

var fileDescriptor_b0973819413f9272 = []byte{
	// 911 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x41, 0x73, 0xdb, 0x44,
	0x14, 0xb6, 0xec, 0xd8, 0x71, 0x9e, 0x5b, 0x57, 0x6c, 0x5c, 0xaa, 0xa4, 0xad, 0xed, 0x66, 0x38,
	0x78, 0x0a, 0x91, 0x70, 0xca, 0x81, 0x61, 0xb8, 0xc8, 0xb6, 0x02, 0x62, 0x8a, 0xed, 0x91, 0x94,
	0x4c, 0xe1, 0xa2, 0x91, 0xad, 0xc5, 0xd1, 0xd8, 0xde, 0x35, 0xda, 0xb5, 0xc1, 0xff, 0x02, 0x7e,
	0x00, 0x7f, 0x80, 0x73, 0x7e, 0x03, 0xd3, 0xe1, 0xd4, 0xe9, 0x89, 0xe1, 0x50, 0x98, 0xe4, 0xc0,
	0xdf, 0x60, 0xa4, 0x5d, 0xa7, 0x8e, 0x09, 0x30, 0x39, 0x59, 0xfb, 0xbe, 0xef, 0x7d, 0xcf, 0xef,
	0xd3, 0x7b, 0x2b, 0xa8, 0x86, 0x84, 0x0d, 0x26, 0x74, 0x38, 0x1e, 0x9e, 0x05, 0x11, 0x31, 0xc2,
	0x80, 0x1a, 0x8b, 0x66, 0xf2, 0xa3, 0xcf, 0x62, 0xca, 0x29, 0xaa, 0x5c, 0xc3, 0xf5, 0x04, 0x58,
	0x34, 0xf7, 0x2b, 0x23, 0x3a, 0xa2, 0x29, 0xc1, 0x48, 0x9e, 0x04, 0x77, 0x7f, 0x6f, 0x44, 0xe9,
	0x68, 0x82, 0x8d, 0xf4, 0x34, 0x98, 0x7f, 0x63, 0x04, 0x64, 0xb9, 0x82, 0x86, 0x94, 0x4d, 0x29,
	0xf3, 0x45, 0x8e, 0x38, 0x48, 0xa8, 0x2a, 0x4e, 0xc6, 0x20, 0x60, 0xd8, 0x58, 0x34, 0x07, 0x98,
	0x07, 0x4d, 0x63, 0x48, 0x23, 0x22, 0xf0, 0x83, 0x5f, 0xf2, 0x50, 0xec, 0xc7, 0x74, 0x46, 0x59,
	0x30, 0x41, 0x65, 0xc8, 0x46, 0xa1, 0xa6, 0xd4, 0x95, 0xc6, 0x96, 0x93, 0x8d, 0x42, 0xf4, 0x11,
	0x14, 0x67, 0x29, 0x86, 0x63, 0x2d, 0x5b, 0x57, 0x1a, 0x3b, 0x2d, 0xed, 0xf5, 0xf9, 0x61, 0x45,
	0x16, 0x30, 0xc3, 0x30, 0xc6, 0x8c, 0xb9, 0x3c, 0x8e, 0xc8, 0xc8, 0xb9, 0x62, 0xa2, 0x0a, 0xe4,
	0x79, 0xc4, 0x27, 0x58, 0xcb, 0x25, 0x29, 0x8e, 0x38, 0xa0, 0x3a, 0x94, 0x42, 0xcc, 0x86, 0x71,
	0x34, 0xe3, 0x11, 0x25, 0xda, 0x56, 0x8a, 0xad, 0x87, 0x90, 0x0e, 0xdb, 0x43, 0x4a, 0x38, 0x26,
	0x5c, 0xcb, 0xd7, 0x95, 0x46, 0xe9, 0xa8, 0xa2, 0x8b, 0x96, 0xf5, 0x55, 0xcb, 0xba, 0x49, 0x96,
	0xce, 0x8a, 0x84, 0x3e, 0x85, 0x02, 0xe3, 0x01, 0x9f, 0x33, 0xad, 0x50, 0x57, 0x1a, 0xe5, 0xa3,
	0xf7, 0xf4, 0x9b, 0xdc, 0xd4, 0x57, 0xdd, 0xb9, 0x29, 0xd7, 0x91, 0x39, 0xe8, 0x09, 0xdc, 0x61,
	0xf3, 0xc1, 0x34, 0xe2, 0x7e, 0x9a, 0xa2, 0x6d, 0xa7, 0x5d, 0x97, 0x44, 0xac, 0x95, 0x84, 0xd0,
	0x07, 0x80, 0x16, 0x94, 0x47, 0x64, 0xe4, 0x33, 0x1e, 0xc4, 0x2b, 0x62, 0x31, 0x25, 0xaa, 0x02,
	0x71, 0x13, 0x40, 0xb0, 0x1b, 0x20, 0x63, 0x3e, 0x26, 0xa1, 0xe4, 0xee, 0xa4, 0xdc, 0xb2, 0x88,
	0x5b, 0x24, 0x14, 0xcc, 0xcf, 0x61, 0x67, 0x89, 0x99, 0xbf, 0xa0, 0x1c, 0x33, 0x0d, 0x52, 0x5f,
	0xdf, 0x7f, 0xf9, 0xa6, 0x96, 0xf9, 0xfd, 0x4d, 0xed, 0xbe, 0xf0, 0x96, 0x85, 0x63, 0x3d, 0xa2,
	0xc6, 0x34, 0xe0, 0x67, 0xba, 0x4d, 0xf8, 0xeb, 0xf3, 0x43, 0x90, 0xa6, 0xdb, 0x84, 0x3b, 0xc5,
	0x25, 0x66, 0xa7, 0x49, 0x32, 0x3a, 0x86, 0x22, 0xa1, 0x52, 0xa8, 0x74, 0x7b, 0xa1, 0x6d, 0x42,
	0x85, 0x4e, 0x1f, 0xee, 0x06, 0x03, 0xc6, 0x83, 0x88, 0x48, 0xb1, 0x3b, 0xb7, 0x17, 0xbb, 0x23,
	0x15, 0x84, 0x22, 0x85, 0x2a, 0xa7, 0x3c, 0x98, 0xf8, 0xd2, 0x93, 0x19, 0xfd, 0x0e, 0xc7, 0x7e,
	0xc0, 0x7d, 0x46, 0x82, 0x19, 0x3b, 0xa3, 0x5c, 0xbb, 0x7b, 0xfb, 0x12, 0xfb, 0xa9, 0xe4, 0x69,
	0xaa, 0xd8, 0x4f, 0x04, 0x4d, 0xee, 0x4a, 0xb9, 0x83, 0x17, 0x70, 0xdf, 0x0c, 0x43, 0x6f, 0x12,
	0xae, 0xde, 0x77, 0x5b, 0x8e, 0x89, 0x0a, 0x39, 0x3e, 0x11, 0x53, 0xbd, 0xe3, 0x24, 0x8f, 0x9b,
	0xa3, 0x98, 0xfd, 0xc7, 0x28, 0x7e, 0x52, 0xfa, 0xf5, 0xfc, 0x70, 0x5b, 0x0a, 0x1c, 0xfc, 0x94,
	0x85, 0x47, 0x0e, 0xfe, 0x76, 0x8e, 0x19, 0xf7, 0xe8, 0x18, 0x13, 0xb6, 0x59, 0xc1, 0x82, 0x77,
	0x62, 0x3c, 0x8c, 0x66, 0x11, 0x26, 0xdc, 0x0f, 0xc4, 0x56, 0x88, 0x7a, 0xff, 0xb1, 0x2f, 0xea,
	0x55, 0x8a, 0x8c, 0xa3, 0x05, 0xa8, 0xc1, 0x94, 0xce, 0x09, 0xf7, 0x63, 0x51, 0x0d, 0x87, 0x5a,
	0xb6, 0x9e, 0x6b, 0x94, 0x8e, 0xf6, 0x74, 0x29, 0x91, 0x6c, 0xb1, 0x2e, 0xb7, 0x58, 0x6f, 0xd3,
	0x88, 0xb4, 0x3e, 0x4c, 0xfc, 0xfb, 0xf9, 0x8f, 0x5a, 0x63, 0x14, 0xf1, 0xb3, 0xf9, 0x40, 0x1f,
	0xd2, 0xa9, 0xbc, 0x00, 0xe4, 0xcf, 0x21, 0x0b, 0xc7, 0x06, 0x5f, 0xce, 0x30, 0x4b, 0x13, 0x98,
	0x73, 0x4f, 0x14, 0x71, 0x56, 0x35, 0x50, 0x13, 0x2a, 0xc1, 0x90, 0x47, 0x8b, 0x88, 0x2f, 0xfd,
	0x75, 0x5f, 0xc4, 0xfa, 0xee, 0xae, 0xb0, 0xce, 0xbf, 0xf9, 0xf3, 0xa3, 0x02, 0x5b, 0xc9, 0x4b,
	0x47, 0x35, 0x28, 0xcd, 0xa4, 0x35, 0xfe, 0xd5, 0x3d, 0x02, 0xab, 0x90, 0x1d, 0x22, 0x1d, 0xf2,
	0xc9, 0x78, 0xfd, 0xff, 0x65, 0x22, 0x68, 0xe8, 0x63, 0x28, 0xd0, 0xb7, 0xff, 0xa5, 0x7c, 0x54,
	0xbf, 0x79, 0xc3, 0x93, 0xe2, 0xbd, 0x94, 0xe7, 0x48, 0xfe, 0xd3, 0xbf, 0x14, 0x28, 0x5f, 0x5f,
	0x7c, 0x54, 0x83, 0x87, 0x7d, 0xa7, 0xd7, 0xef, 0xb9, 0xe6, 0x73, 0xdf, 0xf5, 0x4c, 0xef, 0xc4,
	0xf5, 0x4f, 0xba, 0x6e, 0xdf, 0x6a, 0xdb, 0xc7, 0xb6, 0xd5, 0x51, 0x33, 0xe8, 0x31, 0xec, 0x6d,
	0x12, 0xdc, 0x93, 0xd6, 0x97, 0xb6, 0xe7, 0x59, 0x1d, 0x55, 0x41, 0x4f, 0xe0, 0xf1, 0x26, 0x7c,
	0xda, 0xf3, 0xec, 0xee, 0x67, 0x7e, 0xdf, 0x72, 0xec, 0x5e, 0x47, 0xcd, 0xa2, 0x7d, 0x78, 0x77,
	0x93, 0xd2, 0x37, 0x5d, 0xd7, 0xea, 0xa8, 0x39, 0xf4, 0x08, 0xb4, 0x4d, 0xcc, 0xb1, 0xbe, 0xb0,
	0xda, 0x89, 0xf8, 0xd6, 0x4d, 0xa8, 0xf5, 0xc2, 0x6a, 0x9f, 0x24, 0x68, 0xfe, 0x26, 0xdd, 0x63,
	0xd3, 0x7e, 0x6e, 0x75, 0xd4, 0xc2, 0xd3, 0x31, 0xc0, 0xdb, 0xfe, 0xd1, 0x43, 0x78, 0x70, 0xda,
	0xf3, 0x2c, 0xbf, 0xd7, 0xf7, 0xec, 0x5e, 0x77, 0xa3, 0xc1, 0x5d, 0xb8, 0xb7, 0x0e, 0x7e, 0x65,
	0xb9, 0xaa, 0x82, 0x10, 0x94, 0xd7, 0x83, 0xdd, 0x9e, 0x9a, 0x45, 0x0f, 0x60, 0x77, 0x3d, 0x66,
	0xb6, 0x5c, 0xcf, 0xb4, 0xbb, 0x6a, 0xae, 0xf5, 0xec, 0xe5, 0x45, 0x55, 0x79, 0x75, 0x51, 0x55,
	0xfe, 0xbc, 0xa8, 0x2a, 0x3f, 0x5c, 0x56, 0x33, 0xaf, 0x2e, 0xab, 0x99, 0xdf, 0x2e, 0xab, 0x99,
	0xaf, 0xf7, 0xae, 0x7f, 0xe9, 0xbe, 0x4f, 0xbf, 0x75, 0xe9, 0xd8, 0x0d, 0x0a, 0xe9, 0xf5, 0xfd,
	0xec, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xa0, 0x3f, 0xc6, 0x0d, 0x07, 0x00, 0x00,
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalVotingPowerAtSnapshot.Size()
		i -= size
		if _, err := m.TotalVotingPowerAtSnapshot.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDao(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.AbstainVotes.Size()
		i -= size
		if _, err := m.AbstainVotes.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDao(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.NoVotes.Size()
		i -= size
		if _, err := m.NoVotes.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDao(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.YesVotes.Size()
		i -= size
		if _, err := m.YesVotes.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDao(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.VotingEndBlock != 0 {
		i = encodeVarintDao(dAtA, i, uint64(m.VotingEndBlock))
		i--
		dAtA[i] = 0x48
	}
	if m.VotingStartBlock != 0 {
		i = encodeVarintDao(dAtA, i, uint64(m.VotingStartBlock))
		i--
		dAtA[i] = 0x40
	}
	if m.SubmitBlock != 0 {
		i = encodeVarintDao(dAtA, i, uint64(m.SubmitBlock))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintDao(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDao(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDao(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddTldProposalContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTldProposalContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddTldProposalContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tld) > 0 {
		i -= len(m.Tld)
		copy(dAtA[i:], m.Tld)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Tld)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestTokensProposalContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestTokensProposalContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestTokensProposalContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActivityDescription) > 0 {
		i -= len(m.ActivityDescription)
		copy(dAtA[i:], m.ActivityDescription)
		i = encodeVarintDao(dAtA, i, uint64(len(m.ActivityDescription)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AmountRequested) > 0 {
		for iNdEx := len(m.AmountRequested) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AmountRequested[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDao(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RecipientAddress) > 0 {
		i -= len(m.RecipientAddress)
		copy(dAtA[i:], m.RecipientAddress)
		i = encodeVarintDao(dAtA, i, uint64(len(m.RecipientAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Option != 0 {
		i = encodeVarintDao(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintDao(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDao(dAtA []byte, offset int, v uint64) int {
	offset -= sovDao(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDao(uint64(m.Id))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovDao(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDao(uint64(m.Status))
	}
	if m.SubmitBlock != 0 {
		n += 1 + sovDao(uint64(m.SubmitBlock))
	}
	if m.VotingStartBlock != 0 {
		n += 1 + sovDao(uint64(m.VotingStartBlock))
	}
	if m.VotingEndBlock != 0 {
		n += 1 + sovDao(uint64(m.VotingEndBlock))
	}
	l = m.YesVotes.Size()
	n += 1 + l + sovDao(uint64(l))
	l = m.NoVotes.Size()
	n += 1 + l + sovDao(uint64(l))
	l = m.AbstainVotes.Size()
	n += 1 + l + sovDao(uint64(l))
	l = m.TotalVotingPowerAtSnapshot.Size()
	n += 1 + l + sovDao(uint64(l))
	return n
}

func (m *AddTldProposalContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tld)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	return n
}

func (m *RequestTokensProposalContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecipientAddress)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	if len(m.AmountRequested) > 0 {
		for _, e := range m.AmountRequested {
			l = e.Size()
			n += 1 + l + sovDao(uint64(l))
		}
	}
	l = len(m.ActivityDescription)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	return n
}

func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovDao(uint64(m.ProposalId))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	if m.Option != 0 {
		n += 1 + sovDao(uint64(m.Option))
	}
	return n
}

func sovDao(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDao(x uint64) (n int) {
	return sovDao(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &any.Any{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProposalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitBlock", wireType)
			}
			m.SubmitBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmitBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingStartBlock", wireType)
			}
			m.VotingStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingStartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEndBlock", wireType)
			}
			m.VotingEndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingEndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YesVotes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.YesVotes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoVotes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NoVotes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbstainVotes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AbstainVotes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVotingPowerAtSnapshot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalVotingPowerAtSnapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTldProposalContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTldProposalContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTldProposalContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tld", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tld = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestTokensProposalContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestTokensProposalContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestTokensProposalContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountRequested", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountRequested = append(m.AmountRequested, types.Coin{})
			if err := m.AmountRequested[len(m.AmountRequested)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= VoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDao(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDao
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDao
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDao
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDao
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDao
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDao
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDao        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDao          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDao = fmt.Errorf("proto: unexpected end of group")
)
