syntax = "proto3";
package dnsblockchain.dao.v1;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";
import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "dnsblockchain/dao/v1/dao.proto"; // Importar dao.proto para VoteOption

option go_package = "dnsblockchain/x/dao/types";

service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc SubmitProposal(MsgSubmitProposal) returns (MsgSubmitProposalResponse);
  rpc Vote(MsgVote) returns (MsgVoteResponse);
  // rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse); // Si tienes MsgUpdateParams para este módulo
}

message MsgSubmitProposal {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name) = "dnsblockchain/x/dao/MsgSubmitProposal";

  string proposer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string title = 2; // Título general, el contenido puede tener uno más específico
  string description = 3; // Descripción general
  repeated cosmos.base.v1beta1.Coin initial_deposit = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  google.protobuf.Any content = 5; // Contendrá AddTldProposalContent o RequestTokensProposalContent
}

message MsgSubmitProposalResponse {
  uint64 proposal_id = 1;
}

message MsgVote {
  option (cosmos.msg.v1.signer) = "voter";
  option (amino.name) = "dnsblockchain/x/dao/MsgVote";

  uint64 proposal_id = 1;
  string voter = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  VoteOption option = 3;
}

message MsgVoteResponse {}

// message MsgUpdateParams {
//   option (cosmos.msg.v1.signer) = "authority";
//   option (amino.name) = "dnsblockchain/x/dao/MsgUpdateParams";
//   string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
//   Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
// }
// message MsgUpdateParamsResponse {}