syntax = "proto3";
package dnsblockchain.dao.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto"; // Para sdk.Coin

option go_package = "dnsblockchain/x/dao/types";

// ProposalStatus enumerates the valid statuses of a proposal.
enum ProposalStatus {
  PROPOSAL_STATUS_UNSPECIFIED = 0; // Default value, should not be used
  PROPOSAL_STATUS_SUBMITTED = 1;   // Proposal has been submitted
  PROPOSAL_STATUS_VOTING_PERIOD = 2; // Proposal is currently in voting period
  PROPOSAL_STATUS_PASSED = 3;      // Proposal has passed
  PROPOSAL_STATUS_REJECTED = 4;    // Proposal has been rejected
  PROPOSAL_STATUS_EXECUTED = 5;    // Proposal has been successfully executed (if applicable)
  PROPOSAL_STATUS_FAILED = 6;      // Proposal execution failed or was vetoed
}

// VoteOption enumerates the valid vote options for a proposal.
enum VoteOption {
  VOTE_OPTION_UNSPECIFIED = 0; // Default value
  VOTE_OPTION_YES = 1;
  VOTE_OPTION_NO = 2;
  VOTE_OPTION_ABSTAIN = 3;
}

// Proposal defines the core proposal structure.
message Proposal {
  uint64 id = 1;
  string proposer = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string title = 3;
  string description = 4;
  google.protobuf.Any content = 5; // Specific proposal content (e.g., AddTld, RequestTokens)
  ProposalStatus status = 6;
  uint64 submit_block = 7;
  uint64 voting_start_block = 8;
  uint64 voting_end_block = 9;
  
  // Tally results
  string yes_votes = 10 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  string no_votes = 11 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  string abstain_votes = 12 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // Total voting power at the time voting started, to calculate percentages against.
  string total_voting_power_at_snapshot = 13 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// Content for a proposal to add a TLD
message AddTldProposalContent {
  option (cosmos_proto.implements_interface) = "Content"; // Marks this as a valid proposal content type
  string tld = 1;
  string description = 2; // Optional: why this TLD should be added
}

// Content for a general proposal requesting tokens for an activity
message RequestTokensProposalContent {
  option (cosmos_proto.implements_interface) = "Content"; // Marks this as a valid proposal content type
  string recipient_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated cosmos.base.v1beta1.Coin amount_requested = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string activity_description = 3;
}


// Vote defines a vote on a proposal.
message Vote {
  uint64 proposal_id = 1;
  string voter = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  VoteOption option = 3;
  // string voting_power_used = 4 [ // We will calculate this on the fly or store it differently
  //   (cosmos_proto.scalar) = "cosmos.Int",
  //   (gogoproto.customtype) = "cosmossdk.io/math.Int",
  //   (gogoproto.nullable) = false
  // ];
  // We might not need to store voting_power_used directly on the Vote object
  // if we can recalculate it or if the vote's weight is tied to the voter's power at time of voting.
    string voting_power = 4 [ // Poder de voto del votante en el momento de emitir el voto
      (cosmos_proto.scalar) = "cosmos.Int",
      (gogoproto.customtype) = "cosmossdk.io/math.Int",
      (gogoproto.nullable) = false
    ];
}

// VoterVotingPowerLot stores information about a batch of tokens that grant voting power.
message VoterVotingPowerLot {
  string voter_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 granted_by_proposal_id = 2; // ID of the proposal that granted these tokens
  string initial_amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  uint64 grant_block_height = 4; // Block in which the tokens were granted
}


