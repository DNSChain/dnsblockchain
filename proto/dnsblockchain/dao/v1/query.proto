syntax = "proto3";
package dnsblockchain.dao.v1;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "dnsblockchain/dao/v1/params.proto";
import "dnsblockchain/dao/v1/dao.proto"; 
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
// import "google/protobuf/any.proto"; // No se usa any.Any directamente en las responses de query actuales

option go_package = "dnsblockchain/x/dao/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/dnsblockchain/dao/v1/params";
  }

  // Proposal queries a proposal by ID.
  rpc Proposal(QueryProposalRequest) returns (QueryProposalResponse) { 
    option (google.api.http).get = "/dnsblockchain/dao/v1/proposals/{proposal_id}";
  }

  // Proposals queries all proposals based on given filters.
  rpc Proposals(QueryProposalsRequest) returns (QueryProposalsResponse) {
    option (google.api.http).get = "/dnsblockchain/dao/v1/proposals";
  }

  // Vote queries a vote by proposal ID and voter address.
  rpc Vote(QueryVoteRequest) returns (QueryVoteResponse) {
    option (google.api.http).get = "/dnsblockchain/dao/v1/proposals/{proposal_id}/votes/{voter}";
  }

  // Votes queries all votes by proposal ID.
  rpc Votes(QueryVotesRequest) returns (QueryVotesResponse) {
    option (google.api.http).get = "/dnsblockchain/dao/v1/proposals/{proposal_id}/votes";
  }

  // TallyResult queries the tally result of a proposal.
  rpc TallyResult(QueryTallyResultRequest) returns (QueryTallyResultResponse) {
    option (google.api.http).get = "/dnsblockchain/dao/v1/proposals/{proposal_id}/tally";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  DaoParams params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryProposalRequest is request type for the Query/Proposal RPC method.
message QueryProposalRequest { 
  uint64 proposal_id = 1;
}

// QueryProposalResponse is response type for the Query/Proposal RPC method.
message QueryProposalResponse { 
  Proposal proposal = 1 [(gogoproto.nullable) = false];
}

// QueryProposalsRequest is request type for the Query/Proposals RPC method.
message QueryProposalsRequest {
  // proposal_status defines the status of the proposals.
  ProposalStatus proposal_status = 1;
  // voter defines the voter address of the proposals.
  string voter = 2; // Eliminado: [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // proposer defines the proposer address of the proposals.
  string proposer = 3; // Eliminado: [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

// QueryProposalsResponse is response type for the Query/Proposals RPC method.
message QueryProposalsResponse {
  repeated Proposal proposals = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryVoteRequest is request type for the Query/Vote RPC method.
message QueryVoteRequest {
  uint64 proposal_id = 1;
  string voter = 2; // Eliminado: [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryVoteResponse is response type for the Query/Vote RPC method.
message QueryVoteResponse {
  Vote vote = 1 [(gogoproto.nullable) = false];
}

// QueryVotesRequest is request type for the Query/Votes RPC method.
message QueryVotesRequest {
  uint64 proposal_id = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryVotesResponse is response type for the Query/Votes RPC method.
message QueryVotesResponse {
  repeated Vote votes = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


// TallyResult defines a standard tally for a proposal.
message TallyResult {
  string yes_count = 1 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false];
  string abstain_count = 2 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false];
  string no_count = 3 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false];
}

// QueryTallyResultRequest is request type for the Query/Tally RPC method.
message QueryTallyResultRequest {
  uint64 proposal_id = 1;
}

// QueryTallyResultResponse is response type for the Query/Tally RPC method.
message QueryTallyResultResponse {
  TallyResult tally = 1 [(gogoproto.nullable) = false];
}