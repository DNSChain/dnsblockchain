syntax = "proto3";

package dnsblockchain.dnsblockchain.v1;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "dnsblockchain/dnsblockchain/v1/domain.proto";
import "dnsblockchain/dnsblockchain/v1/params.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "dnsblockchain/x/dnsblockchain/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/dnsblockchain/dnsblockchain/v1/params";
  }

  // GetDomain Queries a domain by its ID.
  rpc GetDomain(QueryGetDomainRequest) returns (QueryGetDomainResponse) {
    option (google.api.http).get = "/dnsblockchain/dnsblockchain/v1/domain/{id}";
  }

  // ListDomain defines the ListDomain RPC.
  rpc ListDomain(QueryAllDomainRequest) returns (QueryAllDomainResponse) {
    option (google.api.http).get = "/dnsblockchain/dnsblockchain/v1/domain";
  }

  // ListPermittedTLDs queries all permitted TLDs.
  rpc ListPermittedTLDs(QueryListPermittedTLDsRequest) returns (QueryListPermittedTLDsResponse) {
    option (google.api.http).get = "/dnsblockchain/dnsblockchain/v1/permitted_tlds";
  }

  // GetDomainByName queries a domain by its FQDN.
  rpc GetDomainByName(QueryGetDomainByNameRequest) returns (QueryGetDomainByNameResponse) {
    option (google.api.http).get = "/dnsblockchain/dnsblockchain/v1/domain_by_name/{name}";
  }

}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryGetDomainRequest defines the QueryGetDomainRequest message.
message QueryGetDomainRequest {
  uint64 id = 1;
}

// QueryGetDomainResponse defines the QueryGetDomainResponse message.
message QueryGetDomainResponse {
  Domain domain = 1 [(gogoproto.nullable) = false];
}

// QueryAllDomainRequest defines the QueryAllDomainRequest message.
message QueryAllDomainRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllDomainResponse defines the QueryAllDomainResponse message.
message QueryAllDomainResponse {
  repeated Domain domain = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryListPermittedTLDsRequest is request type for the Query/ListPermittedTLDs RPC method.
message QueryListPermittedTLDsRequest {}

// QueryListPermittedTLDsResponse is response type for the Query/ListPermittedTLDs RPC method.
message QueryListPermittedTLDsResponse {
  repeated string tlds = 1;
}

// QueryGetDomainByNameRequest defines the request for querying a domain by name.
message QueryGetDomainByNameRequest {
  string name = 1; // FQDN, e.g., "example.dweb"
}

// QueryGetDomainByNameResponse defines the response for querying a domain by name.
message QueryGetDomainByNameResponse {
  Domain domain = 1 [(gogoproto.nullable) = false];
  bool found = 2;    // Indica si el dominio fue encontrado
  bool expired = 3;  // Indica si el dominio encontrado est√° expirado
}